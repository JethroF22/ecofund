/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CampaignInterface extends ethers.utils.Interface {
  functions: {
    "USDC_INSTANCE()": FunctionFragment;
    "admin()": FunctionFragment;
    "campaignGoal()": FunctionFragment;
    "cancelCampaign()": FunctionFragment;
    "cancelPledge()": FunctionFragment;
    "creator()": FunctionFragment;
    "donators(uint256)": FunctionFragment;
    "isSuccessful()": FunctionFragment;
    "numPledges()": FunctionFragment;
    "pledge(uint256)": FunctionFragment;
    "pledges(address)": FunctionFragment;
    "setWithdrawalsLockedState(bool)": FunctionFragment;
    "totalPledges()": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawalsLocked()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "USDC_INSTANCE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "campaignGoal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelCampaign",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPledge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "donators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSuccessful",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numPledges",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pledge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pledges", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalsLockedState",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPledges",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawalsLocked",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "USDC_INSTANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "campaignGoal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPledge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSuccessful",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numPledges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pledge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pledges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalsLockedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPledges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalsLocked",
    data: BytesLike
  ): Result;

  events: {};
}

export class Campaign extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CampaignInterface;

  functions: {
    USDC_INSTANCE(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    campaignGoal(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelPledge(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creator(overrides?: CallOverrides): Promise<[string]>;

    donators(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    isSuccessful(overrides?: CallOverrides): Promise<[boolean]>;

    numPledges(overrides?: CallOverrides): Promise<[BigNumber]>;

    pledge(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pledges(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    setWithdrawalsLockedState(
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalPledges(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalsLocked(overrides?: CallOverrides): Promise<[boolean]>;
  };

  USDC_INSTANCE(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  campaignGoal(overrides?: CallOverrides): Promise<BigNumber>;

  cancelCampaign(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelPledge(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creator(overrides?: CallOverrides): Promise<string>;

  donators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  isSuccessful(overrides?: CallOverrides): Promise<boolean>;

  numPledges(overrides?: CallOverrides): Promise<BigNumber>;

  pledge(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pledges(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  setWithdrawalsLockedState(
    _state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalPledges(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalsLocked(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    USDC_INSTANCE(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    campaignGoal(overrides?: CallOverrides): Promise<BigNumber>;

    cancelCampaign(overrides?: CallOverrides): Promise<void>;

    cancelPledge(overrides?: CallOverrides): Promise<void>;

    creator(overrides?: CallOverrides): Promise<string>;

    donators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    isSuccessful(overrides?: CallOverrides): Promise<boolean>;

    numPledges(overrides?: CallOverrides): Promise<BigNumber>;

    pledge(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    pledges(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setWithdrawalsLockedState(
      _state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    totalPledges(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawalsLocked(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    USDC_INSTANCE(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    campaignGoal(overrides?: CallOverrides): Promise<BigNumber>;

    cancelCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelPledge(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<BigNumber>;

    donators(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    isSuccessful(overrides?: CallOverrides): Promise<BigNumber>;

    numPledges(overrides?: CallOverrides): Promise<BigNumber>;

    pledge(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pledges(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setWithdrawalsLockedState(
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalPledges(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalsLocked(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    USDC_INSTANCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    campaignGoal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelPledge(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    donators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSuccessful(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numPledges(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pledge(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pledges(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setWithdrawalsLockedState(
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalPledges(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalsLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
